// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// brute_force_knapsack_rcpp
List brute_force_knapsack_rcpp(const DataFrame& x, const int WD);
RcppExport SEXP _knapsack_brute_force_knapsack_rcpp(SEXP xSEXP, SEXP WDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type WD(WDSEXP);
    rcpp_result_gen = Rcpp::wrap(brute_force_knapsack_rcpp(x, WD));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_knapsack_brute_force_knapsack_rcpp", (DL_FUNC) &_knapsack_brute_force_knapsack_rcpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_knapsack(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
